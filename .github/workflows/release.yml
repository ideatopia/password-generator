name: Release

on:
  release:
    types: [published]

env:
  RUSTFLAGS: -Dwarnings
  CARGO_TERM_COLOR: always
  BINARY_NAME: "pwdgen"
  CRATES_TOKEN: ${{ secrets.CRATES_TOKEN }}
  VT_API_KEY: ${{ secrets.VT_API_KEY }}

jobs:
  version-check:
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check semver
        uses: obi1kenobi/cargo-semver-checks-action@v2

      - name: Check version
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract tag version (remove 'v' prefix)
          $TAG_VERSION = $env:GITHUB_REF -replace '^refs/tags/v', ''

          # Extract version from Cargo.toml
          $CARGO_VERSION = (Select-String -Path Cargo.toml -Pattern '^version = "(.+)"').Matches.Groups[1].Value

          Write-Output "Tag version: $TAG_VERSION"
          Write-Output "Cargo.toml version: $CARGO_VERSION"

          if ($TAG_VERSION -ne $CARGO_VERSION) {
            Write-Output "Version mismatch detected!"

            # Create an issue
            $ISSUE_BODY = "Version mismatch detected between tag ($TAG_VERSION) and Cargo.toml ($CARGO_VERSION)."
            $ISSUE_URL = gh issue create --title "Version Mismatch in Release $TAG_VERSION" --body $ISSUE_BODY --assignee @me

            # If this is a release, change it to a draft
            if ($env:GITHUB_EVENT_NAME -eq "release") {
              gh release edit $TAG_VERSION --draft
              Write-Output "Release has been changed to draft due to version mismatch."
            }

            Write-Output "An issue has been created: $ISSUE_URL"
            exit 1
          } else {
            Write-Output "Versions match. Proceeding with the release."
          }

  release:
    needs: version-check

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        rust_version: [stable]
        include:
          - os: macos-latest
            os_name: "macos"
            asset_extension: ""
            asset_content_type: application/octet-stream
          - os: windows-latest
            os_name: "windows"
            asset_extension: ".exe"
            asset_content_type: application/octet-stream
          - os: ubuntu-latest
            os_name: "ubuntu"
            asset_extension: ""
            asset_content_type: application/octet-stream

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust_version }}
          override: true

      - name: Prepare Ubuntu environment
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt update
          sudo apt install -y libxcb-shape0-dev libxcb-xfixes0-dev

      - name: Build release
        run: cargo build --release

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.BINARY_NAME }}-${{ github.event.release.tag_name }}-${{ env.BINARY_NAME }}-${{ matrix.os_name }}${{ matrix.asset_extension }}"
          path: target/release/${{ env.BINARY_NAME }}${{ matrix.asset_extension }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./target/release/${{ env.BINARY_NAME }}${{ matrix.asset_extension }}
          asset_name: "${{ env.BINARY_NAME }}-${{ matrix.os_name }}${{ matrix.asset_extension }}"
          asset_content_type: ${{ matrix.asset_content_type }}

      - name: VirusTotal Scan
        uses: crazy-max/ghaction-virustotal@v4
        with:
          vt_api_key: ${{ env.VT_API_KEY }}
          update_release_body: true
          files: ./target/release/${{ env.BINARY_NAME }}${{ matrix.asset_extension }}

      - name: Notify success
        if: success()
        run: echo "Release process completed successfully!"

      - name: Notify failure
        if: failure()
        run: echo "Release process failed, check logs for details."

  publish-crate:
    needs: [version-check, release]

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build
        run: cargo build --release

      - name: Publish to Crates.io
        run: cargo publish --token ${CRATES_TOKEN}
